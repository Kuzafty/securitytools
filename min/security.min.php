<?php namespace Security;class Database{private $host;private $db_name;private $username;private $password;public $conn;public $exception;public function __construct($host,$db_name,$username,$password){$this->host=$host;$this->db_name=$db_name;$this->username=$username;$this->password=$password;return $this->connect();}private function connect(){$this->conn=null;try{$this->conn=new \PDO("mysql:host=".$this->host.";dbname=".$this->db_name,$this->username,$this->password);$this->conn->setAttribute(\PDO::ATTR_ERRMODE,\PDO::ERRMODE_EXCEPTION);return true;}catch(\PDOException $e){$this->exception=$e;return false;}}public function query($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_ASSOC);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function querySingle($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetch(\PDO::FETCH_ASSOC);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchObject($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_OBJ);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchNum($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_NUM);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchBoth($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_BOTH);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}}class Sanitize{const PHONE='phone';const EMAIL='email';const PASSWORD_STRONG='password_strong';const IP='ip';const ADDRESS='address';public static function scope($data){$sanitizedData=[];foreach($data as $key=>$value){$sanitizedData[$key]=htmlspecialchars($value,ENT_QUOTES,'UTF-8');}return $sanitizedData;}public static function sanitize($value){$input=trim($value);$input=preg_replace('/[^\p{L}\p{N}\p{M}\p{Zs}]/u','',$input);$input=preg_replace('/[\p{Zs}]/u',' ',$input);return $input;}public static function check($value,$indicator){switch($indicator){case self::PHONE:return self::validatePhone($value);case self::EMAIL:return self::validateEmail($value);case self::PASSWORD_STRONG:return self::validatePasswordStrength($value);case self::IP:return self::validateIP($value);case self::ADDRESS:return self::validateAddress($value);default:return false;}}private static function validatePhone($value){return preg_match('/^\+?\d{9,15}$/',$value);}private static function validateEmail($value){return filter_var($value,FILTER_VALIDATE_EMAIL);}private static function validatePasswordStrength($value){return preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/',$value);}private static function validateIP($value){return filter_var($value,FILTER_VALIDATE_IP);}private static function validateAddress($value){return preg_match('/^[a-zA-Z0-9\s\.,]+$/u',$value);}}class Token{private static function checkSession(){if(session_status()===PHP_SESSION_NONE){session_start();}}public static function create($name){self::checkSession();if(isset($_SESSION[$name])){return false;}$token=bin2hex(random_bytes(32));$_SESSION[$name]=$token;$_SESSION[$name.'_time']=time();return $token;}public static function delete($name){self::checkSession();if(!isset($_SESSION[$name])){return false;}unset($_SESSION[$name]);unset($_SESSION[$name.'_time']);return true;}public static function process($token,$name){self::checkSession();if(!isset($_SESSION[$name])||$token!==$_SESSION[$name]){return false;}self::delete($name);return true;}public static function processTime($token,$name,$time){self::checkSession();if(!isset($_SESSION[$name])||$token!==$_SESSION[$name]){return false;}if((time()-$_SESSION[$name.'_time'])>$time){return false;}self::delete($name);return true;}}class Ajax{public static function ajax_start($requestType,$contentType){if($_SERVER['REQUEST_METHOD']!==strtoupper($requestType)||!self::is_same_origin()){return false;}header('Content-Type: application/'.$contentType);return true;}private static function is_same_origin(){$http_origin=isset($_SERVER['HTTP_ORIGIN'])?$_SERVER['HTTP_ORIGIN']:'';$https_origin=isset($_SERVER['HTTPS'])&&$_SERVER['HTTPS']=='on'?'https://'.$_SERVER['HTTP_HOST']:'';$origin=$http_origin?:$https_origin?:$_SERVER['HTTP_HOST'];return $origin===$_SERVER['HTTP_HOST'];}public static function ajax_error(){http_response_code(400);}public static function ajax_success(){http_response_code(200);}public static function ajax_token(){if(!class_exists('Token')){return false;}$tokenName=isset($_REQUEST['token_name'])?$_REQUEST['token_name']:null;$tokenValue=isset($_REQUEST['token_value'])?$_REQUEST['token_value']:null;$tokenTime=isset($_REQUEST['token_time'])?intval($_REQUEST['token_time']):null;if($tokenName&&$tokenValue){if($tokenTime!==null){return Token::processTime($tokenValue,$tokenName,$tokenTime);}else{return Token::process($tokenValue,$tokenName);}}return false;}}class Report{public static function handleException($exception,$safePage,$errorFolder){$errorHash=md5($exception->getMessage().$exception->getCode().$exception->getFile().$exception->getLine());if(!file_exists($errorFolder.'/'.$errorHash.'.json')){$errorReport=['message'=>$exception->getMessage(),'code'=>$exception->getCode(),'file'=>$exception->getFile(),'line'=>$exception->getLine(),'trace'=>$exception->getTrace(),'timestamp'=>date('Y-m-d H:i:s')];file_put_contents($errorFolder.'/'.$errorHash.'.json',json_encode($errorReport));}header('Location: '.$safePage);exit();}} ?>