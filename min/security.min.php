<?php namespace Security;use Exception;class Database{private $host;private $db_name;private $username;private $password;public $conn;public $exception;public function __construct($host,$db_name,$username,$password){$this->host=$host;$this->db_name=$db_name;$this->username=$username;$this->password=$password;return $this->connect();}private function connect(){$this->conn=null;try{$this->conn=new \PDO("mysql:host=".$this->host.";dbname=".$this->db_name,$this->username,$this->password);$this->conn->setAttribute(\PDO::ATTR_ERRMODE,\PDO::ERRMODE_EXCEPTION);return true;}catch(\PDOException $e){$this->exception=$e;return false;}}public function query($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_ASSOC);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function querySingle($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetch(\PDO::FETCH_ASSOC);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchObject($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_OBJ);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchNum($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_NUM);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}public function queryFetchBoth($sql,$params=array()){try{$stmt=$this->conn->prepare($sql);$stmt->execute($params);$result=$stmt->fetchAll(\PDO::FETCH_BOTH);return $result;}catch(\PDOException $e){$this->exception=$e;return false;}}}class Sanitize{const PHONE='phone';const EMAIL='email';const PASSWORD_STRONG='password_strong';const IP='ip';const ADDRESS='address';public static function scope($data){$sanitizedData=[];foreach($data as $key=>$value){$sanitizedData[$key]=htmlspecialchars($value,ENT_QUOTES,'UTF-8');}return $sanitizedData;}public static function sanitize($value){$input=trim($value);$input=preg_replace('/[^\p{L}\p{N}\p{M}\p{Zs}]/u','',$input);$input=preg_replace('/[\p{Zs}]/u',' ',$input);return $input;}public static function check($value,$indicator){switch($indicator){case self::PHONE:return self::validatePhone($value);case self::EMAIL:return self::validateEmail($value);case self::PASSWORD_STRONG:return self::validatePasswordStrength($value);case self::IP:return self::validateIP($value);case self::ADDRESS:return self::validateAddress($value);default:return false;}}private static function validatePhone($value){return preg_match('/^\+?\d{9,15}$/',$value);}private static function validateEmail($value){return filter_var($value,FILTER_VALIDATE_EMAIL);}private static function validatePasswordStrength($value){return preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/',$value);}private static function validateIP($value){return filter_var($value,FILTER_VALIDATE_IP);}private static function validateAddress($value){return preg_match('/^[a-zA-Z0-9\s\.,]+$/u',$value);}}class Token{private static function checkSession(){if(session_status()===PHP_SESSION_NONE){session_start();}}public static function create($name){self::checkSession();if(isset($_SESSION[$name])){return false;}$token=bin2hex(random_bytes(32));$_SESSION[$name]=$token;$_SESSION[$name.'_time']=time();return $token;}public static function delete($name){self::checkSession();if(!isset($_SESSION[$name])){return false;}unset($_SESSION[$name]);unset($_SESSION[$name.'_time']);if(isset($_SESSION[$name+'_timer'])){unset($_SESSION[$name+'_timer']);}if(isset($_SESSION[$name+'_count'])){unset($_SESSION[$name+'_count']);}return true;}public static function process($token,$name){self::checkSession();if(!isset($_SESSION[$name])||$token!==$_SESSION[$name]){return false;}self::delete($name);return true;}public static function processTime($token,$name,$time){self::checkSession();if(!isset($_SESSION[$name])||$token!==$_SESSION[$name]){return false;}if((time()-$_SESSION[$name.'_time'])<$time){return false;}self::delete($name);return true;}public static function processLimited($token,$name,$time,$nUp,$threshold){self::checkSession();if(!isset($_SESSION[$name])||$token!==$_SESSION[$name]){return false;}if(!isset($_SESSION[$name.'_count'])||!isset($_SESSION[$name.'_timer'])){$_SESSION[$name.'_count']=0;$_SESSION[$name.'_timer']=0;}$_SESSION[$name.'_count']++;if($_SESSION[$name.'_count']==pow(2,$nUp)){$_SESSION[$name.'_timer']+=1;}if((time()-$_SESSION[$name.'_time'])<($time+($_SESSION[$name.'_timer']*1000))){return false;}if((time()-$_SESSION[$name.'_time'])>$threshold){$_SESSION[$name+'_count']=0;$_SESSION[$name+'_timer']=0;}return true;}}class Ajax{public static function ajax_start($requestType,$contentType){if($_SERVER['REQUEST_METHOD']!==strtoupper($requestType)||!self::is_same_origin()){return false;}header('Content-Type: application/'.$contentType);return true;}private static function is_same_origin(){if(!isset($_SERVER['HTTP_REFERER'])){return false;}$referer=parse_url($_SERVER['HTTP_REFERER']);$referer_origin=$referer['scheme'].'://'.$referer['host'];$server_origin=(isset($_SERVER['HTTPS'])&&$_SERVER['HTTPS']==='on'?"https":"http")."://{$_SERVER['HTTP_HOST']}";return($referer_origin===$server_origin);}public static function ajax_error(){http_response_code(400);}public static function ajax_success(){http_response_code(200);}public static function ajax_value($expression){if($expression){self::ajax_success();}else{self::ajax_error();}}public static function ajax_token($token_name,$source='post',$time=null){switch(strtolower($source)){case 'post':$token_value=isset($_POST[$token_name])?$_POST[$token_name]:null;break;case 'get':$token_value=isset($_GET[$token_name])?$_GET[$token_name]:null;break;case 'cookie':$token_value=isset($_COOKIE[$token_name])?$_COOKIE[$token_name]:null;break;case 'request':$token_value=isset($_REQUEST[$token_name])?$_REQUEST[$token_name]:null;break;default:return false;}if($token_value===null){return false;}if($time!==null){return Token::processTime($token_value,$token_name,$time);}else{return Token::process($token_value,$token_name);}}}class Cookie extends \Exception{const EXPIRATION_FORMAT=1001;const NO_CREATE=1002;const NO_DELETE=1003;const NO_DEFINE=1004;public static function create($name,$value,$secure=true,$expiration=null,$format='time',$omit=false){$expires=0;if($expiration!==null){if($format==='date'){$date=\DateTime::createFromFormat('d/m/Y',$expiration);if($date===false){throw new Exception('Invalid $expiration in format d/m/Y',self::EXPIRATION_FORMAT);}$expires=$date->getTimestamp();}elseif($format==='time'){$time=\DateTime::createFromFormat('H:i:s',$expiration);if($time===false){throw new Exception('Invalid $expiration in format H:i:s',self::EXPIRATION_FORMAT);}$expires=time()+$time->getTimestamp()-$time->setTime(0,0,0)->getTimestamp();}else{throw new Exception('No valid $format expiration',self::EXPIRATION_FORMAT);}}if(!$omit){$name=Sanitize::sanitize(Sanitize::scope([$name]))[0];$value=Sanitize::sanitize(Sanitize::scope([$value]))[0];}if(!setcookie($name,$value,$expires)){throw new Exception('Error setcookie',self::NO_CREATE);}if($secure){if(!isset($_SESSION)){session_start();}$_SESSION[$name.'_hash']=hash('sha256',$value);}}public static function get($name){return isset($_COOKIE[$name])?$_COOKIE[$name]:null;}public static function delete($name,$secure=true){if(isset($_COOKIE[$name])){if(!setcookie($name,'',time()-3600)){throw new Exception('Delete cookie fail',self::NO_DELETE);}if($secure){if(isset($_SESSION[$name.'_hash'])){unset($_SESSION[$name.'_hash']);}}}else{throw new Exception('Request cookie no found',self::NO_DEFINE);}}} ?>